var __awaiter=this&&this.__awaiter||function(b,a,c,d){function h(f){return f instanceof c?f:new c(function(g){g(f)})}return new (c||=Promise)(function(f,g){function m(e){try{k(d.next(e))}catch(l){g(l)}}function n(e){try{k(d["throw"](e))}catch(l){g(l)}}function k(e){e.done?f(e.value):h(e.value).then(m,n)}k((d=d.apply(b,a||[])).next())})};
class Autocomplete extends HTMLElement{constructor(){super();this.inputDelay=300;this.minQuery=1;this.maxOptions=10;this.api="";this.datalist=this.input=null;this.handleInput=b=>{clearTimeout(this.debounce);this.debounce=setTimeout(()=>__awaiter(this,void 0,void 0,function*(){var a,c;const d=(null===(a=this.input)||void 0===a?void 0:a.value)||"";-1!==Object.keys(this.cache).indexOf(d)?a=this.cache[d]:(a=yield this.callApi((null===(c=this.input)||void 0===c?void 0:c.value)||""),a=a.map(h=>Autocomplete.dirtyCategoryName(h)),
this.cache[d]=a);this.updateDatalist(a)}),this.inputDelay)};this.cache={};this.datalistId="so_libhack_wikidice__autocomplete_datalist_id"}static get observedAttributes(){return["api","min-query","max-options"]}attributeChangedCallback(b,a,c){if(a!==c)switch(b){case "api":this.api=c;break;case "min-query":this.minQuery=c;break;case "max-options":this.maxOptions=c;break;default:console.warn(`No attribute named "${b}" exists on <lh-autocomplete/>`)}}connectedCallback(){var b=this.firstElementChild;if("INPUT"===
(null===b||void 0===b?void 0:b.nodeName))this.input=b;else throw Error("Child element passed to <lh-autocomplete/> must be an <input>");b=document.createElement("datalist");b.id=this.datalistId;this.datalist=this.insertBefore(b,this.input);this.input.setAttribute("autocomplete","off");this.input.setAttribute("list",this.datalistId);this.input.addEventListener("input",this.handleInput)}disconnectedCallback(){var b,a,c;null===(b=this.input)||void 0===b?void 0:b.removeEventListener("input",this.handleInput);
null===(a=this.input)||void 0===a?void 0:a.removeAttribute("list");null===(c=this.datalist)||void 0===c?void 0:c.remove()}callApi(b){return __awaiter(this,void 0,void 0,function*(){if(b.length<this.minQuery)return[];const a=yield fetch(`${this.api}${b}`);return 200!==a.status?(console.error(`Failure to fetch autocomplete results: ${yield a.text()}`),[]):(yield a.json()).slice(0,this.maxOptions)})}updateDatalist(b){for(var a,c;null===(a=this.datalist)||void 0===a?0:a.firstChild;)this.datalist.removeChild(this.datalist.firstChild);
for(const d of b)b=document.createElement("option"),b.value=d,null===(c=this.datalist)||void 0===c?void 0:c.appendChild(b)}static dirtyCategoryName(b){let a="";for(let c=0;c<b.length;++c)a="_"===b[c]?a+" ":a+b[c];return a}}window.customElements.define("lh-autocomplete",Autocomplete);
