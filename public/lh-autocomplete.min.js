var __awaiter=this&&this.__awaiter||function(a,b,c,d){function l(f){return f instanceof c?f:new c(function(g){g(f)})}return new (c||=Promise)(function(f,g){function m(e){try{h(d.next(e))}catch(k){g(k)}}function n(e){try{h(d["throw"](e))}catch(k){g(k)}}function h(e){e.done?f(e.value):l(e.value).then(m,n)}h((d=d.apply(a,b||[])).next())})};
class Autocomplete extends HTMLElement{constructor(){super();this.inputDelay=300;this.minQuery=1;this.maxOptions=10;this.api="";this.datalist=this.input=null;this.handleInput=a=>{clearTimeout(this.debounce);this.debounce=setTimeout(()=>__awaiter(this,void 0,void 0,function*(){var b,c;const d=(null===(b=this.input)||void 0===b?void 0:b.value)||"";-1!==Object.keys(this.cache).indexOf(d)?b=this.cache[d]:(b=yield this.callApi((null===(c=this.input)||void 0===c?void 0:c.value)||""),this.cache[d]=b);this.updateDatalist(b)}),
this.inputDelay)};this.cache={};this.datalistId="so_libhack_wikidice__autocomplete_datalist_id"}static get observedAttributes(){return["api","min-query","max-options"]}attributeChangedCallback(a,b,c){if(b!==c)switch(a){case "api":this.api=c;break;case "min-query":this.minQuery=c;break;case "max-options":this.maxOptions=c;break;default:console.warn(`No attribute named "${a}" exists on <lh-autocomplete/>`)}}connectedCallback(){var a=this.firstElementChild;if("INPUT"===(null===a||void 0===a?void 0:a.nodeName))this.input=
a;else throw Error("Child element passed to <lh-autocomplete/> must be an <input>");a=document.createElement("datalist");a.id=this.datalistId;this.datalist=this.insertBefore(a,this.input);this.input.setAttribute("autocomplete","off");this.input.setAttribute("list",this.datalistId);this.input.addEventListener("input",this.handleInput)}disconnectedCallback(){var a,b,c;null===(a=this.input)||void 0===a?void 0:a.removeEventListener("input",this.handleInput);null===(b=this.input)||void 0===b?void 0:b.removeAttribute("list");
null===(c=this.datalist)||void 0===c?void 0:c.remove()}callApi(a){return __awaiter(this,void 0,void 0,function*(){if(a.length<this.minQuery)return[];const b=yield fetch(`${this.api}${a}`);return 200!==b.status?(console.error(`Failure to fetch autocomplete results: ${yield b.text()}`),[]):(yield b.json()).slice(0,this.maxOptions)})}updateDatalist(a){for(var b,c;null===(b=this.datalist)||void 0===b?0:b.firstChild;)this.datalist.removeChild(this.datalist.firstChild);for(const d of a)a=document.createElement("option"),
a.value=d,null===(c=this.datalist)||void 0===c?void 0:c.appendChild(a)}}window.customElements.define("lh-autocomplete",Autocomplete);
